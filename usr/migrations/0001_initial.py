# Generated by Django 5.2.1 on 2025-05-23 18:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthorizationLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Nível de Autorização',
                'verbose_name_plural': 'Níveis de Autorização',
                'db_table': 'AuthorizationLevel',
            },
        ),
        migrations.CreateModel(
            name='ComponentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('table_name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Tipo de Componente',
                'verbose_name_plural': 'Tipos de Componentes',
                'db_table': 'ComponentType',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Região',
                'verbose_name_plural': 'Regiões',
                'db_table': 'Region',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo'), ('MAINTENANCE', 'Manutenção')], default='ACTIVE', max_length=50)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('calibration_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensores',
                'db_table': 'Sensor',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo')], default='ACTIVE', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('auth_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.authorizationlevel', verbose_name='Nível de Autorização')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(blank=True, max_length=255, null=True)),
                ('number', models.CharField(blank=True, max_length=255, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('cep', models.CharField(max_length=255)),
                ('coordinates', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Endereço',
                'verbose_name_plural': 'Endereços',
                'db_table': 'Address',
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo'), ('MAINTENANCE', 'Manutenção')], default='ACTIVE', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='usr.address')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.region')),
            ],
            options={
                'verbose_name': 'Estação',
                'verbose_name_plural': 'Estações',
                'db_table': 'Plant',
            },
        ),
        migrations.CreateModel(
            name='Dissanilizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_alkalinity', models.IntegerField()),
                ('coordinates', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo'), ('MAINTENANCE', 'Manutenção')], default='ACTIVE', max_length=50)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('component_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.componenttype')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usr.plant')),
            ],
            options={
                'verbose_name': 'Dessalinizador',
                'verbose_name_plural': 'Dessalinizadores',
                'db_table': 'Dissanilizer',
            },
        ),
        migrations.CreateModel(
            name='Reservoir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.IntegerField()),
                ('type', models.CharField(max_length=255)),
                ('coordinates', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo'), ('MAINTENANCE', 'Manutenção')], default='ACTIVE', max_length=50)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('component_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.componenttype')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usr.plant')),
            ],
            options={
                'verbose_name': 'Reservatório',
                'verbose_name_plural': 'Reservatórios',
                'db_table': 'Reservoir',
            },
        ),
        migrations.CreateModel(
            name='SensorComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component_id', models.BigIntegerField()),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('component_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.componenttype')),
                ('sensor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='usr.sensor')),
            ],
            options={
                'verbose_name': 'Sensor-Componente',
                'verbose_name_plural': 'Sensores-Componentes',
                'db_table': 'SensorComponent',
            },
        ),
        migrations.CreateModel(
            name='UserRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usr.region')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'UserRegion',
                'unique_together': {('user', 'region')},
            },
        ),
        migrations.AddField(
            model_name='users',
            name='regions',
            field=models.ManyToManyField(blank=True, through='usr.UserRegion', to='usr.region'),
        ),
        migrations.CreateModel(
            name='WaterWell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_flow', models.IntegerField()),
                ('depth', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('coordinates', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('ACTIVE', 'Ativo'), ('INACTIVE', 'Inativo'), ('MAINTENANCE', 'Manutenção')], default='ACTIVE', max_length=50)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('component_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='usr.componenttype')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usr.plant')),
            ],
            options={
                'verbose_name': 'Poço de Água',
                'verbose_name_plural': 'Poços de Água',
                'db_table': 'WaterWell',
            },
        ),
        migrations.CreateModel(
            name='SensorRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('VALID', 'Válido'), ('INVALID', 'Inválido'), ('ESTIMATED', 'Estimado')], default='VALID', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usr.sensor')),
            ],
            options={
                'verbose_name': 'Leitura do Sensor',
                'verbose_name_plural': 'Leituras dos Sensores',
                'db_table': 'SensorRead',
                'indexes': [models.Index(fields=['sensor', 'datetime'], name='SensorRead_sensor__14ee37_idx'), models.Index(fields=['datetime'], name='SensorRead_datetim_8cdbb8_idx')],
            },
        ),
    ]
